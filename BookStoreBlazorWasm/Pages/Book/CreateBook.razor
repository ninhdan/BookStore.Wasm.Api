@page "/admin/book/createbook"
@using BookStoreBlazorWasm.Services.Interfaces
@using BookStoreView.Models.Dtos
@inherits BookBase

@layout LayoutAdmin


<div class="rz-m-0">
    <RadzenBreadCrumb>
        <RadzenBreadCrumb>
            <Template Context="item">
                <RadzenBadge Text="@item.Text" IsPill="true" Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Info" />
            </Template>
            <ChildContent>
                <RadzenBreadCrumbItem Path="/admin" Text="Admin" />
                <RadzenBreadCrumbItem Path="/manage" Text="Manage" />
                <RadzenBreadCrumbItem Path="/admin/book" Text="Book" />
                <RadzenBreadCrumbItem Path="/admin/book/createbook" Text="Create New Book" />
            </ChildContent>
        </RadzenBreadCrumb>
    </RadzenBreadCrumb>
</div>


<div Class="rz-p-0 rz-p-md-12">

    <EditForm Model="@newBook" OnValidSubmit="AddNewBook"  enctype="multipart/form-data">
       <DataAnnotationsValidator/>
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeSM="6">
            <RadzenStack>
                    <RadzenFormField Text="Titile" Variant="@variant">
                    <RadzenTextBox @bind-Value="@newBook.Title" />
                        <ValidationMessage For="@(() => newBook.Title)" />
                </RadzenFormField>
                <RadzenFormField Text="Price" Variant="@variant">
                    <RadzenNumeric @bind-Value="@newBook.Price" />
                        <ValidationMessage For="@(() => newBook.Price)" />
                </RadzenFormField>
                    <RadzenFormField Text="Author" Variant="@variant">
                        <RadzenTextBox @bind-Value="@newBook.Author" />
                        <ValidationMessage For="@(() => newBook.Author)" />
                    </RadzenFormField>
                    <RadzenFormField Text="Publisher" Variant="@variant">
                        <RadzenTextBox @bind-Value="@newBook.Publisher" />
                        <ValidationMessage For="@(() => newBook.Publisher)" />
                    </RadzenFormField>

                    <RadzenFormField Text="Publisher Year" Variant="@variant">
                 <RadzenDatePicker @bind-Value=@newBook.PublisherYear ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" Name="DatePickerWithTime" />
                        <ValidationMessage For="@(() => newBook.PublisherYear)" />
                    </RadzenFormField>
                    <RadzenFormField Text="Size" Variant="@variant">
                        <RadzenTextBox @bind-Value="@newBook.Size" />
                        <ValidationMessage For="@(() => newBook.Size)" />
                </RadzenFormField>
                    <RadzenFormField Text="Weight" Variant="@variant">
                        <RadzenNumeric @bind-Value="@newBook.Weight" />
                        <ValidationMessage For="@(() => newBook.Weight)" />
                    </RadzenFormField>
                    <RadzenFormField Text="QuanlityPage" Variant="@variant">
                        <RadzenNumeric @bind-Value="@newBook.QuanlityPage" />
                        <ValidationMessage For="@(() => newBook.QuanlityPage)" />
                    </RadzenFormField>
                  

                    <RadzenFormField Text="Description" Variant="@variant">
                        <RadzenTextArea @bind-Value="@newBook.Description" />
                    </RadzenFormField>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeSM="6">
            <RadzenStack>
                    <RadzenFormField Text="Translator" Variant="@variant">
                        <RadzenTextBox @bind-Value="@newBook.Translator" />
                    </RadzenFormField>

                    <RadzenFormField Text="Supplier" Variant="@variant">
                        <RadzenDropDownDataGrid Data=@_suppliers @bind-Value="@newBook.SupplierId" 
                        TextProperty="SupplierName" ValueProperty="SupplierId" Change="HandleSupplierChange" />
                        <ValidationMessage For="@(() => newBook.SubcategoryId)" />
                    </RadzenFormField>

                    <RadzenFormField Text="SubCategory" Variant="@variant">
                        <RadzenDropDownDataGrid Data="@_subCategory"
                                                @bind-Value="@newBook.SubcategoryId"
                                                TextProperty="SubCategoryName"
                                                ValueProperty="SubCategoryId"  Change="HandleSubCategoryChange"/>
                        <ValidationMessage For="@(() => newBook.SubcategoryId)" />
                    </RadzenFormField>
                    <RadzenFormField Text="Layout" Variant="@variant">
                        <RadzenDropDown Data=@_layouts @bind-Value="@newBook.LayoutId" TextProperty="LayoutName" ValueProperty="LayoutId" Change="HandleLayoutChange" />
                        <ValidationMessage For="@(() => newBook.LayoutId)" />
                    </RadzenFormField>
                    

                    <RadzenFormField Text="PriceRange" Variant="@variant">
                        <RadzenDropDown Data=@_priceRanges @bind-Value="@newBook.PriceRangeId" ValueProperty="PriceRangeId" TextProperty="PriceRangeName" Change="HandlePriceRangeChange" />
                        <ValidationMessage For="@(() => newBook.PriceRangeId)" />
                    </RadzenFormField>
                    <RadzenFormField Text="Language" Variant="@variant">
                        <RadzenDropDownDataGrid Data=@_languages @bind-Value="@newBook.LanguageId" TextProperty="LanguageName" ValueProperty="LanguageId" Change="HandleLanguageChange" />
                        <ValidationMessage For="@(() => newBook.LanguageId)" />
                           
                    </RadzenFormField>

                    <RadzenFieldset>
                        <ChildContent>
                            <div style="display: flex; align-items: center;">
                                <RadzenFormField Text="Image URL" Variant="@variant" style="flex-grow: 1;">
                                    <RadzenTextBox @bind-Value="@newBook.PathImage" @onchange="@UpdateImage" />
                                    <ValidationMessage For="@(() => newBook.PathImage)" />
                                </RadzenFormField>

                                <div style="max-width: 100%; max-height: 190px; overflow: hidden;">
                                    <img src="@newBook.PathImage" style="width: 100%; height: auto;" />
                                </div>
                            </div>
                        </ChildContent>
                    </RadzenFieldset>


            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
            <button type="button" class="btn btn-outline-secondary" @onclick="GotoBack">Close</button>
            <button type="submit" class="btn btn-primary">Save changes</button>
        </RadzenStack>
</EditForm>

</div>


@code {

    Variant variant = Variant.Outlined;

   
    private void UpdateImage(ChangeEventArgs e)
    {
        // Cập nhật nguồn hình ảnh khi giá trị thay đổi
        newBook.PathImage = e.Value.ToString();
    }



    private IEnumerable<SubCategoryDto> _subCategory =  new List<SubCategoryDto>();
    private IEnumerable<SupplierDto> _suppliers = new List<SupplierDto>();
    private IEnumerable<PriceRangeDto> _priceRanges = new List<PriceRangeDto>();
    private IEnumerable<LayoutDto> _layouts = new List<LayoutDto>();
    private IEnumerable<LanguageDto> _languages = new List<LanguageDto>();

    [Inject] private ISubCategoryService subCategoryService {get; set; }
    [Inject] private ISupplierService supplierService {get; set; }
    [Inject] private IPriceRangeService priceRangeService {get; set; }
    [Inject] private ILayoutService layoutService {get; set; }
    [Inject] private ILanguageService languageService {get; set; }

    protected override async Task OnInitializedAsync()
    {
        _subCategory = await subCategoryService.GetAllSubCategory();
        _suppliers = await supplierService.GetAllSupplier();
        _priceRanges = await priceRangeService.GetPriceRanges();
        _layouts = await layoutService.GetLayouts();
        _languages = await languageService.GetLanguages();
    }


   

    private void HandleSubCategoryChange(object value)
    {
        if (value != null)
        {
            Guid selectedSubCategoryId;
            if (Guid.TryParse(value.ToString(), out selectedSubCategoryId))
            {
                var selectedSubCategory = _subCategory.FirstOrDefault(c => c.SubCategoryId == selectedSubCategoryId);

                if (selectedSubCategory != null)
                {
                    // Set both SubCategoryId and SubCategoryName in newBook
                    newBook.SubcategoryId = selectedSubCategoryId;
                    newBook.SubcategoryName = selectedSubCategory.SubCategoryName;
                }else
                {
                    newBook.SubcategoryId = Guid.Empty;
                    newBook.SubcategoryName = string.Empty;
                }
            }
        }
    }


    private void HandleSupplierChange(object value)
    {
        if (value != null)
        {
            Guid selectedSupplierId = (Guid)value;
            var selectedSupplier = _suppliers.FirstOrDefault(c => c.SupplierId == selectedSupplierId);

            if (selectedSupplier != null)
            {

                newBook.SupplierId = selectedSupplierId;
                newBook.SupplierName = selectedSupplier.SupplierName;
            }else
            {

                newBook.SupplierId = Guid.Empty;
                newBook.SupplierName = string.Empty;
            }
        }
    }

    private void HandlePriceRangeChange(object value)
    {
        if (value != null)
        {
            Guid selectedPriceRangeId = (Guid)value;
            var selectedPriceRange = _priceRanges.FirstOrDefault(c => c.PriceRangeId == selectedPriceRangeId);

            if (selectedPriceRange != null)
            {
                newBook.PriceRangeId = selectedPriceRangeId;
                newBook.PriceRangeName = selectedPriceRange.PriceRangeName;
            }else
            {
                newBook.PriceRangeId = Guid.Empty;
                newBook.PriceRangeName = string.Empty;
            }
        }
    }

    private void HandleLayoutChange(object value)
    {
        if (value != null)
        {
            Guid selectedLayoutId = (Guid)value;
            var selectedLayout = _layouts.FirstOrDefault(c => c.LayoutId == selectedLayoutId);

            if (selectedLayout != null)
            {
                newBook.LayoutId = selectedLayoutId;
                newBook.LayoutName = selectedLayout.LayoutName;
            }
            else
            {
                newBook.LayoutId = Guid.Empty;
                newBook.LayoutName = string.Empty;
            }
        }
    }

    private void HandleLanguageChange(object value)
    {
        if (value != null)
        {
            Guid selectedLanguageId = (Guid)value;
            var selectedLanguage = _languages.FirstOrDefault(c => c.LanguageId == selectedLanguageId);

            if (selectedLanguage != null)
            {
                newBook.LanguageId = selectedLanguageId;
                newBook.LanguageName = selectedLanguage.LanguageName;
            }
        }
        else
        {
            newBook.LanguageId = Guid.Empty;
            newBook.LanguageName = string.Empty;
        }

    
    }











   
}