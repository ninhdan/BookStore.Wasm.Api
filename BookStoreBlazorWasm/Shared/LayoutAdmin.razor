@inherits LayoutComponentBase
@using Blazored.Toast.Configuration
@using Blazored.Modal
@using Microsoft.AspNetCore.Authorization
@using Radzen.Blazor
@using Radzen.Blazor.Rendering
@using System.Security.Claims
@inject IUserService userService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthStateProvider



<style>
    .bg-root {
        background-color: #F3F6F9 !important;
    }

    .custom-menubar {
        background-color: #4340D2;
    }

    .custom-header {
        background-color: #ffff;
        color: Black;
        padding: 2px;
    }

    .custom-RadzenPanelMenuItem {
        color: #596372 !important;
        border: none !important;
    }

    .custom-sidebar {
        background: white;
        border: none !important;
    }

    .logo-container {
        text-align: center;
        padding: 10px;
    }

    .logo {
        max-width: 200px;
        height: 100px;
    }


    .z-sidebar-scrollbar::-webkit-scrollbar {
        display: none;
    }
</style>



<RadzenLayout class="bg-root">
    
    <RadzenHeader class="rz-mx-5 mt-2 mb-2 rz-mr-7 rz-border-radius-4 custom-header">

        <RadzenRow JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">

                <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" class="rz-border-radius-3 custom-menubar ms-3" />
                <RadzenStack JustifyContent="JustifyContent.Right">
                    <RadzenLabel Text="Wellcome Come To Page Admin Water 7 Book Store" />
                </RadzenStack>

            </RadzenStack>



            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0" JustifyContent="JustifyContent.SpaceBetween">

                <RadzenProfileMenu Style="background:white; border-radius: 20px">
                    <Template>
                        <AuthorizeView>
                            <Authorized>
                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                                <RadzenGravatar Email="nguyenninhdan123456@gmail.com" Style="width: 35px; height: 35px;" />
                                    <RadzenLabel Style="font-size: 15px; ">@UserDisplayName(context.User.Claims.ToList())</RadzenLabel>
                            </RadzenStack>
                            </Authorized>
                        </AuthorizeView>
                    </Template>
                    <ChildContent>
                            <NavLink @onclick="LogoutAsync"><RadzenProfileMenuItem Text="Đăng xuất" Icon="logout" Style="font-size: 15px" /></NavLink>
                    </ChildContent>
                </RadzenProfileMenu>

            </RadzenStack>
        </RadzenRow>




    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebar1Expanded" Responsive="false" Style=" width:300px; background:white; border:none" class="rz-ml-5 rz-mr-2 mb-3 mt-2 rz-border-radius-4 shadow z-sidebar-scrollbar">


        <RadzenPanelMenu DisplayStyle="@( MenuItemDisplayStyle.IconAndText)" ShowArrow="false" class="custom-sidebar ">
            <div class="logo-container">
                <NavLink href="admin">
                    <img class="logo" src="./images/logo/Logo.png" alt="Logo" />
                </NavLink>
                
            </div>
            <RadzenPanelMenuItem Text="Dashboard" Icon="dashboard" IconColor="#596372" class="rz-background-color-white  rz-border-radius-5 m-2 custom-RadzenPanelMenuItem" Path="/admin" />
            <RadzenPanelMenuItem Text="Manage" Icon="thumb_down_off_alt" IconColor="#596372" class="rz-background-color-white  rz-border-radius-5 m-2 custom-RadzenPanelMenuItem">
                <RadzenPanelMenuItem Text="Information Product" Icon="info">
                    <RadzenPanelMenuItem Text="Category" Path="/admin/category" />
                    <RadzenPanelMenuItem Text="SubCategory" Path="/admin/subcategory" />
                    <RadzenPanelMenuItem Text="Book" Path="/admin/book" />
                    <RadzenPanelMenuItem Text="Language" Path="/admin/language" />
                    <RadzenPanelMenuItem Text="Supplier " Path="/admin/supplier" />
                    <RadzenPanelMenuItem Text="Layout" Path="/admin/layout" />
                    <RadzenPanelMenuItem Text="Price Range" Path="/admin/pricerange" />
                </RadzenPanelMenuItem>
                <RadzenPanelMenuItem Text="Information Customer" Icon="info_outline">
                    <RadzenPanelMenuItem Text="Customer" />
                    <RadzenPanelMenuItem Text="Address" />
                    <RadzenPanelMenuItem Text="User Account" Path="/admin/user" />
                    <RadzenPanelMenuItem Text="Order" />
                    <RadzenPanelMenuItem Text="Rating & Comment" />
                </RadzenPanelMenuItem>

            </RadzenPanelMenuItem>
        </RadzenPanelMenu>

    </RadzenSidebar>
    <RadzenBody>
        <RadzenBody class="bg-white mb-3 mt-0 rz-border-radius-4 shadow">
            <div class="rz-p-4">
                @Body
            </div>
        </RadzenBody>
    </RadzenBody>

</RadzenLayout>

@code {
    bool sidebar1Expanded = true;
}

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="5"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorClass="error-toast-override"
                ErrorIcon="fa fa-bug"
                InfoClass="info-toast-override"
                InfoIcon="fa fa-info-circle"
                WarningClass="warning-toast-override"
                WarningIcon="fa fa-exclamation-triangle" />


@code{
    private string UserDisplayName(List<Claim> claims)
    {
        var firstName = claims.Where(_ => _.Type == "FirstName").Select(_ => _.Value).FirstOrDefault();
        var lastName = claims.Where(_ => _.Type == "LastName").Select(_ => _.Value).FirstOrDefault();

        if (!string.IsNullOrEmpty(firstName) || !string.IsNullOrEmpty(lastName))
        {
            return $"{lastName} {firstName}";
        }
        var phone = claims.Where(_ => _.Type == "Phone").Select(_ => _.Value).FirstOrDefault();
        return phone;
    }

    private async Task LogoutAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var claims = user.Claims.ToList();

        await userService.LogoutUserAsync(claims);
        navigationManager.NavigateTo("/");
    }
}